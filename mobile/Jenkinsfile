pipeline {
  agent {
    docker {
      image 'chiahan1123/docker-jenkins-golang'
    }
  }

  stages {
    stage('Test Mobile') {
      steps {
        withEnv(["GOPATH=$WORKSPACE/mobile"]) {
          sh 'gocov test -v $(go list ./mobile/... | grep -v vendor) > ./mobile/coverage.json'
        }
      }
    }
    // stage('Archive Coverage Report') {
    //   when {
    //     expression {
    //       GIT_BRANCH = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
    //       return GIT_BRANCH != 'master'
    //     }
    //   }
    //   steps {
    //     sh 'gocov-html ./mobile/coverage.json > ./mobile/coverage.html'
    //   }
    //   post {
    //     success {
    //       archiveArtifacts 'mobile/coverage.html'
    //     }
    //   }
    // }
    // stage('Publish Cobertura Report') {
    //   when {
    //     expression {
    //       GIT_BRANCH = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
    //       return GIT_BRANCH == 'master'
    //     }
    //   }
    //   steps {
    //     sh 'cat ./mobile/coverage.json | gocov-xml > ./mobile/cobertura.xml'
    //   }
    //   post {
    //     success {
    //       step([
    //         $class: 'CoberturaPublisher',
    //         autoUpdateHealth: false,
    //         autoUpdateStability: false,
    //         coberturaReportFile: 'mobile/cobertura.xml',
    //         failUnhealthy: false,
    //         failUnstable: false,
    //         maxNumberOfBuilds: 0,
    //         onlyStable: false,
    //         sourceEncoding: 'ASCII',
    //         zoomCoverageChart: false
    //       ])
    //     }
    //   }
    // }
    //
    // This stage replaces the stages above (Archive Coverage Report, Publish Cobertura Report) by
    // using if-else in a script instead of the when-directive since there is an issue with
    // loading a declarative pipeline, which causes the when-directive to always evaluate to
    // true (https://issues.jenkins-ci.org/browse/JENKINS-42224).
    // Note: This declarative pipeline works as expected when triggered by its master pipeline job.
    stage('Coverage Report') {
      steps {
        script {
          def branch = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
          if (branch != 'master') {
            echo 'Archiving Coverage Report...'
            sh 'gocov-html ./mobile/coverage.json > ./mobile/coverage.html'
            archiveArtifacts 'mobile/coverage.html'
          } else {
            echo 'Publishing Cobertura Report...'
            sh 'cat ./mobile/coverage.json | gocov-xml > ./mobile/cobertura.xml'
            step([
              $class: 'CoberturaPublisher',
              autoUpdateHealth: false,
              autoUpdateStability: false,
              coberturaReportFile: 'mobile/cobertura.xml',
              failUnhealthy: false,
              failUnstable: false,
              maxNumberOfBuilds: 0,
              onlyStable: false,
              sourceEncoding: 'ASCII',
              zoomCoverageChart: false
            ])
          }
        }
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
